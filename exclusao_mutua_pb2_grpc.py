# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import exclusao_mutua_pb2 as exclusao__mutua__pb2


class ServicoEleicaoStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.IniciarPedido = channel.unary_unary(
                '/exclusao_mutua.ServicoEleicao/IniciarPedido',
                request_serializer=exclusao__mutua__pb2.PedidoRequest.SerializeToString,
                response_deserializer=exclusao__mutua__pb2.PedidoResponse.FromString,
                )
        self.EncerrarPedido = channel.unary_unary(
                '/exclusao_mutua.ServicoEleicao/EncerrarPedido',
                request_serializer=exclusao__mutua__pb2.PedidoRequest.SerializeToString,
                response_deserializer=exclusao__mutua__pb2.PedidoResponse.FromString,
                )


class ServicoEleicaoServicer(object):
    """Missing associated documentation comment in .proto file."""

    def IniciarPedido(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EncerrarPedido(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServicoEleicaoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'IniciarPedido': grpc.unary_unary_rpc_method_handler(
                    servicer.IniciarPedido,
                    request_deserializer=exclusao__mutua__pb2.PedidoRequest.FromString,
                    response_serializer=exclusao__mutua__pb2.PedidoResponse.SerializeToString,
            ),
            'EncerrarPedido': grpc.unary_unary_rpc_method_handler(
                    servicer.EncerrarPedido,
                    request_deserializer=exclusao__mutua__pb2.PedidoRequest.FromString,
                    response_serializer=exclusao__mutua__pb2.PedidoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'exclusao_mutua.ServicoEleicao', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ServicoEleicao(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def IniciarPedido(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exclusao_mutua.ServicoEleicao/IniciarPedido',
            exclusao__mutua__pb2.PedidoRequest.SerializeToString,
            exclusao__mutua__pb2.PedidoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EncerrarPedido(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exclusao_mutua.ServicoEleicao/EncerrarPedido',
            exclusao__mutua__pb2.PedidoRequest.SerializeToString,
            exclusao__mutua__pb2.PedidoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
